<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="617" failures="0" errors="0" time="30.824">
  <testsuite name="Sensor API (e2e)" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:07" time="8.793" tests="33">
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna tutti i sensori associati a un gateway (admin user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna tutti i sensori associati a un gateway (admin user)" time="0.197">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (admin user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (admin user)" time="0.068">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (operator user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (operator user)" time="0.065">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (viewer user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Ritorna un array vuoto quando un gateway non ha sensori (viewer user)" time="0.062">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 401 UnauthorizedError: token non presente" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 401 UnauthorizedError: token non presente" time="0.072">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 404 NotFoundError: gateway inesistente" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 404 NotFoundError: gateway inesistente" time="0.069">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con tutti i campi (admin user)" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con tutti i campi (admin user)" time="0.063">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con tutti i campi (operator user)" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con tutti i campi (operator user)" time="0.059">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con solo i campi obbligatori (admin user)" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con solo i campi obbligatori (admin user)" time="0.059">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con solo i campi obbligatori (operator user)" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di successo Crea un sensore con solo i campi obbligatori (operator user)" time="0.061">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 400 Invalid input data: macAddress non presente" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 400 Invalid input data: macAddress non presente" time="0.06">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 401 Unauthorized: token non presente" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 401 Unauthorized: token non presente" time="0.077">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 403 Insufficient rights: utente non autorizzato" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 403 Insufficient rights: utente non autorizzato" time="0.06">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 404 NotFoundError: gateway inesistente" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 404 NotFoundError: gateway inesistente" time="0.057">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 409 ConflictError: macAddress già in uso" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 409 ConflictError: macAddress già in uso" time="0.069">
    </testcase>
    <testcase classname="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 500 MAC address cannot be empty" name="Sensor API (e2e) POST /networks/{networkCode}/gateways/{gatewayMac}/sensors Casi di errore 500 MAC address cannot be empty" time="0.055">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (admin user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (admin user)" time="0.094">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (operator user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (operator user)" time="0.071">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (viewer user)" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Ritorna un sensore specifico (viewer user)" time="0.061">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.06">
    </testcase>
    <testcase classname="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" name="Sensor API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" time="0.08">
    </testcase>
    <testcase classname="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un sensore (admin user)" name="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un sensore (admin user)" time="0.074">
    </testcase>
    <testcase classname="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" name="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.061">
    </testcase>
    <testcase classname="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Insufficient rights: utente non autorizzato" name="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Insufficient rights: utente non autorizzato" time="0.134">
    </testcase>
    <testcase classname="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" name="Sensor API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" time="0.064">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna nome e descrizione di un sensore (admin user)" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna nome e descrizione di un sensore (admin user)" time="0.076">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna nome e descrizione di un sensore (operator user)" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna nome e descrizione di un sensore (operator user)" time="0.074">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna tutti i campi del sensore (admin user)" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Aggiorna tutti i campi del sensore (admin user)" time="0.07">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.08">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Forbidden: utente non autorizzato" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Forbidden: utente non autorizzato" time="0.059">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: sensore inesistente" time="0.06">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 409 ConflictError: macAddress già in uso" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 409 ConflictError: macAddress già in uso" time="0.067">
    </testcase>
    <testcase classname="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 500 MAC address cannot be empty" name="Sensor API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 500 MAC address cannot be empty" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="UserRepository: mocked database" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:16" time="0.354" tests="29">
    <testcase classname="UserRepository: mocked database create user" name="UserRepository: mocked database create user" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database Create operator user " name="UserRepository: mocked database Create operator user " time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database Create viewer user" name="UserRepository: mocked database Create viewer user" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database create user: ConflictError" name="UserRepository: mocked database create user: ConflictError" time="0.007">
    </testcase>
    <testcase classname="UserRepository: mocked database create user: ConflictError con messaggio corretto" name="UserRepository: mocked database create user: ConflictError con messaggio corretto" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Gestione errori del database durante il salvataggio" name="UserRepository: mocked database Gestione errori del database durante il salvataggio" time="0.003">
    </testcase>
    <testcase classname="UserRepository: mocked database Gestione errori database durante il controllo di conflitto" name="UserRepository: mocked database Gestione errori database durante il controllo di conflitto" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database find user by username" name="UserRepository: mocked database find user by username" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Find admin user by username" name="UserRepository: mocked database Find admin user by username" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database Find viewer user by username" name="UserRepository: mocked database Find viewer user by username" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database find user by username: not found" name="UserRepository: mocked database find user by username: not found" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database find user by username: not found error con messaggio corretto" name="UserRepository: mocked database find user by username: not found error con messaggio corretto" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database Gestione errori database durante find user by username" name="UserRepository: mocked database Gestione errori database durante find user by username" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database username con stringa vuota" name="UserRepository: mocked database username con stringa vuota" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database Gestione username con caratteri speciali" name="UserRepository: mocked database Gestione username con caratteri speciali" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Get All Users success" name="UserRepository: mocked database Get All Users success" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Get All Users: success (array vuoto)" name="UserRepository: mocked database Get All Users: success (array vuoto)" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Get All Users: success (array con un solo user)" name="UserRepository: mocked database Get All Users: success (array con un solo user)" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Get All Users: Gestione errori del database" name="UserRepository: mocked database Get All Users: Gestione errori del database" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database Get All Users: users di diverso tipo" name="UserRepository: mocked database Get All Users: users di diverso tipo" time="0.011">
    </testcase>
    <testcase classname="UserRepository: mocked database delete user" name="UserRepository: mocked database delete user" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete operator user" name="UserRepository: mocked database Delete operator user" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete viewer user" name="UserRepository: mocked database Delete viewer user" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database NotFoundError: delete user non esistente" name="UserRepository: mocked database NotFoundError: delete user non esistente" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete user: Gestione database error durante ricerca per eliminazione" name="UserRepository: mocked database Delete user: Gestione database error durante ricerca per eliminazione" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete user: Gestione database error durante la rimozione" name="UserRepository: mocked database Delete user: Gestione database error durante la rimozione" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete user: Gestione stringa vuota" name="UserRepository: mocked database Delete user: Gestione stringa vuota" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database Delete user: Gestione username con caratteri speciali" name="UserRepository: mocked database Delete user: Gestione username con caratteri speciali" time="0.002">
    </testcase>
    <testcase classname="UserRepository: mocked database mockfind chiamata con i parametri corretti in tutti i metodi" name="UserRepository: mocked database mockfind chiamata con i parametri corretti in tutti i metodi" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GET /network/{networkCode}/measurements (e2e)" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:16" time="2.381" tests="24">
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get all measurements" name="GET /network/{networkCode}/measurements (e2e) get all measurements" time="0.151">
    </testcase>
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get all measurements with startDate and endDate" name="GET /network/{networkCode}/measurements (e2e) get all measurements with startDate and endDate" time="0.055">
    </testcase>
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get measurements with specific sensor filter" name="GET /network/{networkCode}/measurements (e2e) get measurements with specific sensor filter" time="0.055">
    </testcase>
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get measurements with unauthorized token" name="GET /network/{networkCode}/measurements (e2e) get measurements with unauthorized token" time="0.06">
    </testcase>
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get measurements for non-existent network" name="GET /network/{networkCode}/measurements (e2e) get measurements for non-existent network" time="0.054">
    </testcase>
    <testcase classname="GET /network/{networkCode}/measurements (e2e) get measurements with viewer token" name="GET /network/{networkCode}/measurements (e2e) get measurements with viewer token" time="0.051">
    </testcase>
    <testcase classname="POST /measurements create measurements with operator token" name="POST /measurements create measurements with operator token" time="0.05">
    </testcase>
    <testcase classname="POST /measurements create measurements with viewer token should fail" name="POST /measurements create measurements with viewer token should fail" time="0.057">
    </testcase>
    <testcase classname="POST /measurements create measurement with invalid data format" name="POST /measurements create measurement with invalid data format" time="0.047">
    </testcase>
    <testcase classname="POST /measurements create measurement with missing required field" name="POST /measurements create measurement with missing required field" time="0.045">
    </testcase>
    <testcase classname="POST /measurements create measurement for non-existent sensor" name="POST /measurements create measurement for non-existent sensor" time="0.047">
    </testcase>
    <testcase classname="GET /network/{networkCode}/stats (e2e) get stats for all sensors" name="GET /network/{networkCode}/stats (e2e) get stats for all sensors" time="0.102">
    </testcase>
    <testcase classname="GET /network/{networkCode}/stats (e2e) get stats with date range" name="GET /network/{networkCode}/stats (e2e) get stats with date range" time="0.05">
    </testcase>
    <testcase classname="GET /network/{networkCode}/outliers (e2e) get outliers for all sensors" name="GET /network/{networkCode}/outliers (e2e) get outliers for all sensors" time="0.081">
    </testcase>
    <testcase classname="GET /network/{networkCode}/outliers (e2e) get outliers with date filter" name="GET /network/{networkCode}/outliers (e2e) get outliers with date filter" time="0.058">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for specific sensor" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for specific sensor" time="0.075">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for specific sensor with date range" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for specific sensor with date range" time="0.048">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for non-existent sensor" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements for non-existent sensor" time="0.052">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements with invalid date format" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/measurements (e2e) get measurements with invalid date format" time="0.048">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/stats (e2e) get stats for specific sensor" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/stats (e2e) get stats for specific sensor" time="0.076">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/stats (e2e) get stats with date range" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/stats (e2e) get stats with date range" time="0.055">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers for specific sensor" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers for specific sensor" time="0.086">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers with date filter" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers with date filter" time="0.058">
    </testcase>
    <testcase classname="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers for non-existent sensor" name="GET /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac}/outliers (e2e) get outliers for non-existent sensor" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="MeasurementRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:19" time="1.28" tests="35">
    <testcase classname="MeasurementRoutes integration get all measurements of a network or of a set of sensor" name="MeasurementRoutes integration get all measurements of a network or of a set of sensor" time="0.179">
    </testcase>
    <testcase classname="MeasurementRoutes integration get all measurements: 400 Invalid input data" name="MeasurementRoutes integration get all measurements: 400 Invalid input data" time="0.012">
    </testcase>
    <testcase classname="MeasurementRoutes integration get all measurements: 401 UnauthorizedError" name="MeasurementRoutes integration get all measurements: 401 UnauthorizedError" time="0.011">
    </testcase>
    <testcase classname="MeasurementRoutes integration get all measurements:404 Not Found" name="MeasurementRoutes integration get all measurements:404 Not Found" time="0.007">
    </testcase>
    <testcase classname="MeasurementRoutes integration get measurements for a specific sensor" name="MeasurementRoutes integration get measurements for a specific sensor" time="0.033">
    </testcase>
    <testcase classname="MeasurementRoutes integration getMeasurementBySensor : 401 unauthorized" name="MeasurementRoutes integration getMeasurementBySensor : 401 unauthorized" time="0.008">
    </testcase>
    <testcase classname="MeasurementRoutes integration getMeasurementBySensor return empty measurements array when no measurement exists:200" name="MeasurementRoutes integration getMeasurementBySensor return empty measurements array when no measurement exists:200" time="0.004">
    </testcase>
    <testcase classname="MeasurementRoutes integration getMeasurementBySensor: invalid date format in query parameters:400" name="MeasurementRoutes integration getMeasurementBySensor: invalid date format in query parameters:400" time="0.006">
    </testcase>
    <testcase classname="MeasurementRoutes integration get measurements for a specific sensor: 404 Not Found" name="MeasurementRoutes integration get measurements for a specific sensor: 404 Not Found" time="0.007">
    </testcase>
    <testcase classname="MeasurementRoutes integration Get stats by network ID should get stats for all sensors in network" name="MeasurementRoutes integration Get stats by network ID should get stats for all sensors in network" time="0.028">
    </testcase>
    <testcase classname="MeasurementRoutes integration Get stats by network ID should get stats for specific sensors with date range" name="MeasurementRoutes integration Get stats by network ID should get stats for specific sensors with date range" time="0.005">
    </testcase>
    <testcase classname="MeasurementRoutes integration Get stats by network ID should return 401 when unauthorized" name="MeasurementRoutes integration Get stats by network ID should return 401 when unauthorized" time="0.007">
    </testcase>
    <testcase classname="MeasurementRoutes integration Get stats by network ID should return 404 when network not found" name="MeasurementRoutes integration Get stats by network ID should return 404 when network not found" time="0.005">
    </testcase>
    <testcase classname="MeasurementRoutes integration getStatsBySensorId: 200" name="MeasurementRoutes integration getStatsBySensorId: 200" time="0.027">
    </testcase>
    <testcase classname="MeasurementRoutes integration getStatsBySensorId for specific date range: 200" name="MeasurementRoutes integration getStatsBySensorId for specific date range: 200" time="0.004">
    </testcase>
    <testcase classname="MeasurementRoutes integration getStatsBySensorId: return 401 when unauthorized" name="MeasurementRoutes integration getStatsBySensorId: return 401 when unauthorized" time="0.009">
    </testcase>
    <testcase classname="MeasurementRoutes integration getStatsBySensorId: return 404 when sensor not found" name="MeasurementRoutes integration getStatsBySensorId: return 404 when sensor not found" time="0.005">
    </testcase>
    <testcase classname="MeasurementRoutes integration getStatsBySensorId: return zero values when no measurements exist" name="MeasurementRoutes integration getStatsBySensorId: return zero values when no measurements exist" time="0.003">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersByNetworkId: 200" name="MeasurementRoutes integration getOutliersByNetworkId: 200" time="0.026">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersByNetworkId with date range filter: 200" name="MeasurementRoutes integration getOutliersByNetworkId with date range filter: 200" time="0.003">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersByNetworkId: return 401 when unauthorized" name="MeasurementRoutes integration getOutliersByNetworkId: return 401 when unauthorized" time="0.006">
    </testcase>
    <testcase classname="MeasurementRoutes integration should return 404 when network not found" name="MeasurementRoutes integration should return 404 when network not found" time="0.006">
    </testcase>
    <testcase classname="MeasurementRoutes integration should return empty array when no outliers exist" name="MeasurementRoutes integration should return empty array when no outliers exist" time="0.004">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersBySensorId: 200" name="MeasurementRoutes integration getOutliersBySensorId: 200" time="0.03">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersBySensorId with date range filter: 200" name="MeasurementRoutes integration getOutliersBySensorId with date range filter: 200" time="0.004">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersBySensorId: return 401 when unauthorized" name="MeasurementRoutes integration getOutliersBySensorId: return 401 when unauthorized" time="0.008">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersBySensorId: return 404 when entity not found" name="MeasurementRoutes integration getOutliersBySensorId: return 404 when entity not found" time="0.005">
    </testcase>
    <testcase classname="MeasurementRoutes integration getOutliersBySensorId: return empty measurements when no outliers exist" name="MeasurementRoutes integration getOutliersBySensorId: return empty measurements when no outliers exist" time="0.003">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 201" name="MeasurementRoutes integration createMeasurement: 201" time="0.014">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 400 invalid measurement data" name="MeasurementRoutes integration createMeasurement: 400 invalid measurement data" time="0.006">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 400 invalid date format" name="MeasurementRoutes integration createMeasurement: 400 invalid date format" time="0.009">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 401 handle unauthorized access" name="MeasurementRoutes integration createMeasurement: 401 handle unauthorized access" time="0.027">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 403 handle insufficient rights" name="MeasurementRoutes integration createMeasurement: 403 handle insufficient rights" time="0.011">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 404 non-existent sensor" name="MeasurementRoutes integration createMeasurement: 404 non-existent sensor" time="0.008">
    </testcase>
    <testcase classname="MeasurementRoutes integration createMeasurement: 201 handle multiple measurements" name="MeasurementRoutes integration createMeasurement: 201 handle multiple measurements" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="GET /users (e2e)" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:20" time="1.246" tests="40">
    <testcase classname="GET /users (e2e) GET /users Get All Users: success (admin user)" name="GET /users (e2e) GET /users Get All Users: success (admin user)" time="0.036">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users Get All Users: 403 InsufficientRightsError (operator user)" name="GET /users (e2e) GET /users Get All Users: 403 InsufficientRightsError (operator user)" time="0.008">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users Get All Users: 403 InsufficientRightsErro (viewer user)" name="GET /users (e2e) GET /users Get All Users: 403 InsufficientRightsErro (viewer user)" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token non presente)" name="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token non presente)" time="0.008">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token non valido)" name="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token non valido)" time="0.009">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token formato invalido)" name="GET /users (e2e) GET /users Get All Users: 401 UnauthorizedError (token formato invalido)" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: success (admin user)" name="GET /users (e2e) POST /users Create user: success (admin user)" time="0.058">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 403 InsufficientRightsError (operator user prova a creare un user) " name="GET /users (e2e) POST /users Create user: 403 InsufficientRightsError (operator user prova a creare un user) " time="0.042">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 403 InsufficientRightsError (viewer user prova a creare un user)" name="GET /users (e2e) POST /users Create user: 403 InsufficientRightsError (viewer user prova a creare un user)" time="0.014">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 401 UnauthorizedError (token non presente)" name="GET /users (e2e) POST /users Create user: 401 UnauthorizedError (token non presente)" time="0.013">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 409 ConflictError (username già esistente)" name="GET /users (e2e) POST /users Create user: 409 ConflictError (username già esistente)" time="0.024">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 400 BadRequest (username mancante)" name="GET /users (e2e) POST /users Create user: 400 BadRequest (username mancante)" time="0.018">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 400 BadRequest (password mancante)" name="GET /users (e2e) POST /users Create user: 400 BadRequest (password mancante)" time="0.013">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 400 BadRequest (type user mancante)" name="GET /users (e2e) POST /users Create user: 400 BadRequest (type user mancante)" time="0.014">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: 400 BadRequest  (user type non valido)" name="GET /users (e2e) POST /users Create user: 400 BadRequest  (user type non valido)" time="0.013">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: success (crea user di tipo admin)" name="GET /users (e2e) POST /users Create user: success (crea user di tipo admin)" time="0.022">
    </testcase>
    <testcase classname="GET /users (e2e) POST /users Create user: success (crea user di tipo operator)" name="GET /users (e2e) POST /users Create user: success (crea user di tipo operator)" time="0.02">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: success" name="GET /users (e2e) GET /users/{userName} Get User: success" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: success" name="GET /users (e2e) GET /users/{userName} Get User: success" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: success success" name="GET /users (e2e) GET /users/{userName} Get User: success success" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: 404 NotFoundError (user inesistente)" name="GET /users (e2e) GET /users/{userName} Get User: 404 NotFoundError (user inesistente)" time="0.007">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: 403 InsufficientRightsError (operator user)" name="GET /users (e2e) GET /users/{userName} Get User: 403 InsufficientRightsError (operator user)" time="0.007">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: 403 InsufficientRightsError (viewer user)" name="GET /users (e2e) GET /users/{userName} Get User: 403 InsufficientRightsError (viewer user)" time="0.007">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: 401 UnauthorizedError (token assente)" name="GET /users (e2e) GET /users/{userName} Get User: 401 UnauthorizedError (token assente)" time="0.008">
    </testcase>
    <testcase classname="GET /users (e2e) GET /users/{userName} Get User: 401 UnauthorizedError (toeken non valido)" name="GET /users (e2e) GET /users/{userName} Get User: 401 UnauthorizedError (toeken non valido)" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: success" name="GET /users (e2e) DELETE /users/{userName} Delete user: success" time="0.028">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: 404 NotFoundError (user inesistente)" name="GET /users (e2e) DELETE /users/{userName} Delete user: 404 NotFoundError (user inesistente)" time="0.019">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: 403 InsufficientRightsError (operator prova ad eliminare un user)" name="GET /users (e2e) DELETE /users/{userName} Delete user: 403 InsufficientRightsError (operator prova ad eliminare un user)" time="0.02">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: 403 InsufficientRightsError (viewer prova ad eliminare un user)" name="GET /users (e2e) DELETE /users/{userName} Delete user: 403 InsufficientRightsError (viewer prova ad eliminare un user)" time="0.019">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: 401 UnauthorizedError (token non presente)" name="GET /users (e2e) DELETE /users/{userName} Delete user: 401 UnauthorizedError (token non presente)" time="0.02">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: 401 UnauthorizedError (token non valido)" name="GET /users (e2e) DELETE /users/{userName} Delete user: 401 UnauthorizedError (token non valido)" time="0.019">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: success (admin elimina admin)" name="GET /users (e2e) DELETE /users/{userName} Delete user: success (admin elimina admin)" time="0.026">
    </testcase>
    <testcase classname="GET /users (e2e) DELETE /users/{userName} Delete user: success  (admin elimina operator)" name="GET /users (e2e) DELETE /users/{userName} Delete user: success  (admin elimina operator)" time="0.027">
    </testcase>
    <testcase classname="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: authorization header vuoto" name="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: authorization header vuoto" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: bearer token vuoto" name="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: bearer token vuoto" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: formato del token sbagliato" name="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: formato del token sbagliato" time="0.007">
    </testcase>
    <testcase classname="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: Token malformato" name="GET /users (e2e) Casi limite autenticazione  401 UnauthorizedError: Token malformato" time="0.006">
    </testcase>
    <testcase classname="GET /users (e2e) Scenari Gestione user lifecycle completo (create, get, delete)" name="GET /users (e2e) Scenari Gestione user lifecycle completo (create, get, delete)" time="0.032">
    </testcase>
    <testcase classname="GET /users (e2e) Scenari Gestione di creazioni e cancellazioni multiple di user" name="GET /users (e2e) Scenari Gestione di creazioni e cancellazioni multiple di user" time="0.042">
    </testcase>
    <testcase classname="GET /users (e2e) get all users" name="GET /users (e2e) get all users" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="NetworkRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:21" time="1.115" tests="21">
    <testcase classname="NetworkRoutes integration Create network Create network: ok" name="NetworkRoutes integration Create network Create network: ok" time="0.194">
    </testcase>
    <testcase classname="NetworkRoutes integration Create network Create network: ok, solo campi obbligatori" name="NetworkRoutes integration Create network Create network: ok, solo campi obbligatori" time="0.003">
    </testcase>
    <testcase classname="NetworkRoutes integration Create network Create network: 401 Unauthorized" name="NetworkRoutes integration Create network Create network: 401 Unauthorized" time="0.03">
    </testcase>
    <testcase classname="NetworkRoutes integration Create network Create network: 403 InsufficientRightsError" name="NetworkRoutes integration Create network Create network: 403 InsufficientRightsError" time="0.007">
    </testcase>
    <testcase classname="NetworkRoutes integration Create network Create network: 409 Network code already in use" name="NetworkRoutes integration Create network Create network: 409 Network code already in use" time="0.007">
    </testcase>
    <testcase classname="NetworkRoutes integration Get all networks Get all networks: ok" name="NetworkRoutes integration Get all networks Get all networks: ok" time="0.02">
    </testcase>
    <testcase classname="NetworkRoutes integration Get all networks Get all networks: 401 UnauthorizedError" name="NetworkRoutes integration Get all networks Get all networks: 401 UnauthorizedError" time="0.009">
    </testcase>
    <testcase classname="NetworkRoutes integration Get all networks Get all networks: AppError generico" name="NetworkRoutes integration Get all networks Get all networks: AppError generico" time="0.006">
    </testcase>
    <testcase classname="NetworkRoutes integration Get network by code Get network by code: ok" name="NetworkRoutes integration Get network by code Get network by code: ok" time="0.023">
    </testcase>
    <testcase classname="NetworkRoutes integration Get network by code Get network by code: 401 UnauthorizedError" name="NetworkRoutes integration Get network by code Get network by code: 401 UnauthorizedError" time="0.007">
    </testcase>
    <testcase classname="NetworkRoutes integration Get network by code Get network by code: 404 Network not found" name="NetworkRoutes integration Get network by code Get network by code: 404 Network not found" time="0.006">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network: ok" name="NetworkRoutes integration Update network Update network: ok" time="0.013">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network: ok, cambio solo opzionali" name="NetworkRoutes integration Update network Update network: ok, cambio solo opzionali" time="0.004">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network: 401 UnauthorizedError" name="NetworkRoutes integration Update network Update network: 401 UnauthorizedError" time="0.026">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network: 403 InsufficientRightsError" name="NetworkRoutes integration Update network Update network: 403 InsufficientRightsError" time="0.008">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network by code: 404 Network not found" name="NetworkRoutes integration Update network Update network by code: 404 Network not found" time="0.007">
    </testcase>
    <testcase classname="NetworkRoutes integration Update network Update network: 409 Network code already in use" name="NetworkRoutes integration Update network Update network: 409 Network code already in use" time="0.007">
    </testcase>
    <testcase classname="NetworkRoutes integration Delete network Delete network: ok" name="NetworkRoutes integration Delete network Delete network: ok" time="0.01">
    </testcase>
    <testcase classname="NetworkRoutes integration Delete network Delete network: 401 Unauthorized" name="NetworkRoutes integration Delete network Delete network: 401 Unauthorized" time="0.019">
    </testcase>
    <testcase classname="NetworkRoutes integration Delete network Delete network: 403 InsufficientRightsError" name="NetworkRoutes integration Delete network Delete network: 403 InsufficientRightsError" time="0.008">
    </testcase>
    <testcase classname="NetworkRoutes integration Delete network Delete network by code: 404 Network not found" name="NetworkRoutes integration Delete network Delete network by code: 404 Network not found" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Gateway API (e2e)" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:22" time="1.448" tests="40">
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (admin user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (admin user)" time="0.037">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (operator user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (operator user)" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (viewer user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di successo Ritorna un array vuoto quando un network non ha gateways (viewer user)" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non presente" time="0.015">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non valido" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non valido" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: formato del token non valido" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: formato del token non valido" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 404 NotFoundError: network inestente" name="Gateway API (e2e) GET /networks/{networkCode}/gateways Casi di errore 404 NotFoundError: network inestente" time="0.014">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway con tutti i campi (admin user)" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway con tutti i campi (admin user)" time="0.024">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway con solo i campi obbligatori (operator user)" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway con solo i campi obbligatori (operator user)" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway ignorando eventuali sensori annidati" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di successo Crea un gateway ignorando eventuali sensori annidati" time="0.018">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 400 Invalid input data: macAddress non presente" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 400 Invalid input data: macAddress non presente" time="0.012">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 400 Invalid input data: macAddress stringa vuota" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 400 Invalid input data: macAddress stringa vuota" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 401 UnauthorizedError: token non presente" time="0.035">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 403 InsufficientRightsError: viewer prova a creare un network" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 403 InsufficientRightsError: viewer prova a creare un network" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 404 NotFoundError: network inesistente" time="0.012">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 409 ConflictError: macAddress già in uso" name="Gateway API (e2e) POST /networks/{networkCode}/gateways Casi di errore 409 ConflictError: macAddress già in uso" time="0.015">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks/{networkCode}/gateways 500 Network cannot be empty" name="Gateway API (e2e) POST /networks/{networkCode}/gateways 500 Network cannot be empty" time="0.012">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (admin user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (admin user)" time="0.042">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (operator user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (operator user)" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (viewer user)" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Ritorna un gateway specifico (viewer user)" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" time="0.011">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" name="Gateway API (e2e) GET /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" time="0.012">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna nome e descrizione di un gateway (admin operator)" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna nome e descrizione di un gateway (admin operator)" time="0.037">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna il macAddress di un gateway (operator user)" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna il macAddress di un gateway (operator user)" time="0.026">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna un gateway ignorando sensori annidati" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Aggiorna un gateway ignorando sensori annidati" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.035">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 403 InsufficientRightsError: viewer prova ad aggiornare un gateway" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 403 InsufficientRightsError: viewer prova ad aggiornare un gateway" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" time="0.012">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 409 ConflictError: macAddress già esistente" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 409 ConflictError: macAddress già esistente" time="0.028">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 500 Network cannot be empty" name="Gateway API (e2e) PATCH /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 500 Network cannot be empty" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Delete gateway: success (admin user)" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Delete gateway: success (admin user)" time="0.043">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Delete Gateway: success (operator user)" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di successo Delete Gateway: success (operator user)" time="0.021">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.025">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 403 InsufficientRightsError: viewer user prova ad eliminare un gateway" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 403 InsufficientRightsError: viewer user prova ad eliminare un gateway" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: network inesistente" time="0.011">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac} Casi di errore 404 NotFoundError: gateway inesistente" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) Integration tests - GET all gateways after operations should return all remaining gateways after CRUD operations" name="Gateway API (e2e) Integration tests - GET all gateways after operations should return all remaining gateways after CRUD operations" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) Integration tests - GET all gateways after operations should return gateways with correct structure" name="Gateway API (e2e) Integration tests - GET all gateways after operations should return gateways with correct structure" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Gateway API (e2e)" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:24" time="1.196" tests="33">
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (admin user)" name="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (admin user)" time="0.039">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (operator user)" name="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (operator user)" time="0.007">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (viewer user)" name="Gateway API (e2e) GET /networks Casi di successo Array vuoto, no networks esistenti (viewer user)" time="0.007">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (admin user)" name="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (admin user)" time="0.042">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (operator user)" name="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (operator user)" time="0.006">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (viewer user)" name="Gateway API (e2e) GET /networks Casi di successo Ritorna un con tre entry (viewer user)" time="0.006">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) GET /networks Casi di errore 401 UnauthorizedError: token non presente" time="0.011">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di successo Crea un network con tutti i campi (admin user)" name="Gateway API (e2e) POST /networks Casi di successo Crea un network con tutti i campi (admin user)" time="0.008">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di successo Crea un network con solo campi obbligatori (admin user)" name="Gateway API (e2e) POST /networks Casi di successo Crea un network con solo campi obbligatori (admin user)" time="0.009">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di successo Crea un network con tutti i campi (operator user)" name="Gateway API (e2e) POST /networks Casi di successo Crea un network con tutti i campi (operator user)" time="0.006">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di successo Crea un network con solo campi obbligatori (operator user)" name="Gateway API (e2e) POST /networks Casi di successo Crea un network con solo campi obbligatori (operator user)" time="0.006">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di errore 400 Invalid input data: networkCode non presente" name="Gateway API (e2e) POST /networks Casi di errore 400 Invalid input data: networkCode non presente" time="0.006">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di errore 401 Unauthorized: invalid token format" name="Gateway API (e2e) POST /networks Casi di errore 401 Unauthorized: invalid token format" time="0.021">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di errore 403 Insufficient rights: utente non autorizzato" name="Gateway API (e2e) POST /networks Casi di errore 403 Insufficient rights: utente non autorizzato" time="0.01">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di errore 409 Network code already in use: codice già usato" name="Gateway API (e2e) POST /networks Casi di errore 409 Network code already in use: codice già usato" time="0.008">
    </testcase>
    <testcase classname="Gateway API (e2e) POST /networks Casi di errore 500 Network code cannot be empty" name="Gateway API (e2e) POST /networks Casi di errore 500 Network code cannot be empty" time="0.007">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (admin user)" name="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (admin user)" time="0.04">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (operator user)" name="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (operator user)" time="0.02">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (viewer user)" name="Gateway API (e2e) GET /networks/{networkCode} Casi di successo Get di network dal codice (viewer user)" time="0.02">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode} Casi di errore 401 UnauthorizedError: invalid format token" name="Gateway API (e2e) GET /networks/{networkCode} Casi di errore 401 UnauthorizedError: invalid format token" time="0.021">
    </testcase>
    <testcase classname="Gateway API (e2e) GET /networks/{networkCode} Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) GET /networks/{networkCode} Casi di errore 404 NotFoundError: network inesistente" time="0.021">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un network (admin user)" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un network (admin user)" time="0.027">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un network (operator user)" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di successo Elimina un network (operator user)" time="0.022">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 401 UnauthorizedError: token non presente" time="0.024">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Insufficient rights: utente non autorizzato" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 403 Insufficient rights: utente non autorizzato" time="0.014">
    </testcase>
    <testcase classname="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: network inesistente" name="Gateway API (e2e) DELETE /networks/{networkCode}/gateways/{gatewayMac}/sensors/{sensorMac} Casi di errore 404 NotFoundError: network inesistente" time="0.018">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di successo Update di un network (admin user)" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di successo Update di un network (admin user)" time="0.029">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di successo Update di un network. network code invariato (operator user)" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di successo Update di un network. network code invariato (operator user)" time="0.019">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 401 UnauthorizedError: invalid token format" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 401 UnauthorizedError: invalid token format" time="0.035">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 401 InsufficientRightsError: utente non autorizzato" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 401 InsufficientRightsError: utente non autorizzato" time="0.013">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 404 NotFoundError: network non esistente" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 404 NotFoundError: network non esistente" time="0.014">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 409 ConflictError: network code already in use" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 409 ConflictError: network code already in use" time="0.019">
    </testcase>
    <testcase classname="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 500 Network cannot be empty" name="Gateway API (e2e) PATCH /networks/{networkCode} Casi di errore 500 Network cannot be empty" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="SensorRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:25" time="1.22" tests="28">
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: success (Admin user)" name="SensorRoutes integration Create Sensor Create Sensor: success (Admin user)" time="0.173">
    </testcase>
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: success (Operator user)" name="SensorRoutes integration Create Sensor Create Sensor: success (Operator user)" time="0.003">
    </testcase>
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: 401 Unauthorized)" name="SensorRoutes integration Create Sensor Create Sensor: 401 Unauthorized)" time="0.034">
    </testcase>
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: 403 Insufficient rights" name="SensorRoutes integration Create Sensor Create Sensor: 403 Insufficient rights" time="0.011">
    </testcase>
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: 404 Not Found" name="SensorRoutes integration Create Sensor Create Sensor: 404 Not Found" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Create Sensor Create Sensor: 409 Conflict (macAddress already in use)" name="SensorRoutes integration Create Sensor Create Sensor: 409 Conflict (macAddress already in use)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Get All Sensors Get All Sensors: success (authenticated user)" name="SensorRoutes integration Get All Sensors Get All Sensors: success (authenticated user)" time="0.022">
    </testcase>
    <testcase classname="SensorRoutes integration Get All Sensors Get All Sensors: 401 UnauthorizedError" name="SensorRoutes integration Get All Sensors Get All Sensors: 401 UnauthorizedError" time="0.01">
    </testcase>
    <testcase classname="SensorRoutes integration Get All Sensors Get All Sensors: 404 Not Found Error" name="SensorRoutes integration Get All Sensors Get All Sensors: 404 Not Found Error" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Get Sensor Get Sensor: success" name="SensorRoutes integration Get Sensor Get Sensor: success" time="0.022">
    </testcase>
    <testcase classname="SensorRoutes integration Get Sensor Get Sensor: 401 UnauthorizedError" name="SensorRoutes integration Get Sensor Get Sensor: 401 UnauthorizedError" time="0.009">
    </testcase>
    <testcase classname="SensorRoutes integration Get Sensor Get Sensor: 404 Not Found Error (sensore inesistente)" name="SensorRoutes integration Get Sensor Get Sensor: 404 Not Found Error (sensore inesistente)" time="0.008">
    </testcase>
    <testcase classname="SensorRoutes integration Get Sensor Get Sensor: 404 Not Found Error (Gateway inesistente)" name="SensorRoutes integration Get Sensor Get Sensor: 404 Not Found Error (Gateway inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: success (admin user)" name="SensorRoutes integration Delete Sensor Delete Sensor: success (admin user)" time="0.013">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: success (operator user)" name="SensorRoutes integration Delete Sensor Delete Sensor: success (operator user)" time="0.003">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: 401 UnauthorizedError" name="SensorRoutes integration Delete Sensor Delete Sensor: 401 UnauthorizedError" time="0.019">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: 403 InsufficientRightsError" name="SensorRoutes integration Delete Sensor Delete Sensor: 403 InsufficientRightsError" time="0.009">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (network inesistente)" name="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (network inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (gateway inesistente)" name="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (gateway inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (sensor inesistente)" name="SensorRoutes integration Delete Sensor Delete Sensor: 404 NotFoundError (sensor inesistente)" time="0.005">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: success (admin user)" name="SensorRoutes integration Update Sensor Update Sensor: success (admin user)" time="0.011">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: success (operator user)" name="SensorRoutes integration Update Sensor Update Sensor: success (operator user)" time="0.004">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 401 UnauthorizedError" name="SensorRoutes integration Update Sensor Update Sensor: 401 UnauthorizedError" time="0.031">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 403 InsufficientRightsError" name="SensorRoutes integration Update Sensor Update Sensor: 403 InsufficientRightsError" time="0.009">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (network inesistente)" name="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (network inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (gateway inesistente)" name="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (gateway inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (sensor inesistente)" name="SensorRoutes integration Update Sensor Update Sensor: 404 NotFoundError (sensor inesistente)" time="0.006">
    </testcase>
    <testcase classname="SensorRoutes integration Update Sensor Update Sensor: 409 ConflictError (macAddress esistente)" name="SensorRoutes integration Update Sensor Update Sensor: 409 ConflictError (macAddress esistente)" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="UserRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:26" time="1.108" tests="29">
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: success" name="UserRoutes integration POST /api/v1/users Create user: success" time="0.169">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: 401 UnauthorizedError: token non valido" name="UserRoutes integration POST /api/v1/users Create user: 401 UnauthorizedError: token non valido" time="0.029">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: 403 InsufficientRightsError" name="UserRoutes integration POST /api/v1/users Create user: 403 InsufficientRightsError" time="0.008">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: 400 BadRequest" name="UserRoutes integration POST /api/v1/users Create user: 400 BadRequest" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: 400 BadRequest (user type non valido)" name="UserRoutes integration POST /api/v1/users Create user: 400 BadRequest (user type non valido)" time="0.008">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: 409 ConflictError (user esistente)" name="UserRoutes integration POST /api/v1/users Create user: 409 ConflictError (user esistente)" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user:  400 BadRequest (JSON non valido)" name="UserRoutes integration POST /api/v1/users Create user:  400 BadRequest (JSON non valido)" time="0.011">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Ceate user: success (admin type)" name="UserRoutes integration POST /api/v1/users Ceate user: success (admin type)" time="0.005">
    </testcase>
    <testcase classname="UserRoutes integration POST /api/v1/users Create user: success (viewer type)" name="UserRoutes integration POST /api/v1/users Create user: success (viewer type)" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users Get All Users: success" name="UserRoutes integration GET /api/v1/users Get All Users: success" time="0.024">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users Get All Users: 401 UnauthorizedError (token non valido)" name="UserRoutes integration GET /api/v1/users Get All Users: 401 UnauthorizedError (token non valido)" time="0.006">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users Get All Users: 403 InsufficientRightsError" name="UserRoutes integration GET /api/v1/users Get All Users: 403 InsufficientRightsError" time="0.006">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users Get All Users: 500 InternalServerError" name="UserRoutes integration GET /api/v1/users Get All Users: 500 InternalServerError" time="0.006">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users Get All Users: success (array vuoto)" name="UserRoutes integration GET /api/v1/users Get All Users: success (array vuoto)" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users/:username Get User By Username: success" name="UserRoutes integration GET /api/v1/users/:username Get User By Username: success" time="0.027">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users/:username Get User By Username: 401 UnauthorizedError (token non valido)" name="UserRoutes integration GET /api/v1/users/:username Get User By Username: 401 UnauthorizedError (token non valido)" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users/:username Get User By Username: 403 InsufficientRightsError" name="UserRoutes integration GET /api/v1/users/:username Get User By Username: 403 InsufficientRightsError" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users/:username Get User By Username: 404 NotFoundError" name="UserRoutes integration GET /api/v1/users/:username Get User By Username: 404 NotFoundError" time="0.006">
    </testcase>
    <testcase classname="UserRoutes integration GET /api/v1/users/:username Get User By Username: username con caratteri speciali" name="UserRoutes integration GET /api/v1/users/:username Get User By Username: username con caratteri speciali" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration DELETE /api/v1/users/:username Delete User: success" name="UserRoutes integration DELETE /api/v1/users/:username Delete User: success" time="0.009">
    </testcase>
    <testcase classname="UserRoutes integration DELETE /api/v1/users/:username Delete User: 401 UnauthorizedError" name="UserRoutes integration DELETE /api/v1/users/:username Delete User: 401 UnauthorizedError" time="0.019">
    </testcase>
    <testcase classname="UserRoutes integration DELETE /api/v1/users/:username Delete User: 403 InsufficientRightsError" name="UserRoutes integration DELETE /api/v1/users/:username Delete User: 403 InsufficientRightsError" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration DELETE /api/v1/users/:username Delete User: 404 NotFoundError" name="UserRoutes integration DELETE /api/v1/users/:username Delete User: 404 NotFoundError" time="0.008">
    </testcase>
    <testcase classname="UserRoutes integration DELETE /api/v1/users/:username Delete User: username con caratteri speciali" name="UserRoutes integration DELETE /api/v1/users/:username Delete User: username con caratteri speciali" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration Casi limite e gestione degli errori Username molto lunghi" name="UserRoutes integration Casi limite e gestione degli errori Username molto lunghi" time="0.005">
    </testcase>
    <testcase classname="UserRoutes integration Casi limite e gestione degli errori URL encoded characters in username" name="UserRoutes integration Casi limite e gestione degli errori URL encoded characters in username" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration get all users" name="UserRoutes integration get all users" time="0.004">
    </testcase>
    <testcase classname="UserRoutes integration get all users: 401 UnauthorizedError" name="UserRoutes integration get all users: 401 UnauthorizedError" time="0.007">
    </testcase>
    <testcase classname="UserRoutes integration get all users: 403 InsufficientRightsError" name="UserRoutes integration get all users: 403 InsufficientRightsError" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="GatewayRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:28" time="1.324" tests="26">
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: success (Admin user)" name="GatewayRoutes integration Create Gateway Create Gateway: success (Admin user)" time="0.179">
    </testcase>
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: success (Operator user)" name="GatewayRoutes integration Create Gateway Create Gateway: success (Operator user)" time="0.006">
    </testcase>
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: utente non autorizzato (token non valido, 401 error)" name="GatewayRoutes integration Create Gateway Create Gateway: utente non autorizzato (token non valido, 401 error)" time="0.057">
    </testcase>
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: 403 Insufficient rights" name="GatewayRoutes integration Create Gateway Create Gateway: 403 Insufficient rights" time="0.017">
    </testcase>
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: error 404 Not Found" name="GatewayRoutes integration Create Gateway Create Gateway: error 404 Not Found" time="0.013">
    </testcase>
    <testcase classname="GatewayRoutes integration Create Gateway Create Gateway: 409 error (macAddress già in uso)" name="GatewayRoutes integration Create Gateway Create Gateway: 409 error (macAddress già in uso)" time="0.009">
    </testcase>
    <testcase classname="GatewayRoutes integration Get All Gateways Get All Gateways : success (user autenticato)" name="GatewayRoutes integration Get All Gateways Get All Gateways : success (user autenticato)" time="0.03">
    </testcase>
    <testcase classname="GatewayRoutes integration Get All Gateways Get All Gateways: 401 UnauthorizedError" name="GatewayRoutes integration Get All Gateways Get All Gateways: 401 UnauthorizedError" time="0.01">
    </testcase>
    <testcase classname="GatewayRoutes integration Get All Gateways Get All Gateways: 404 Not Found Error" name="GatewayRoutes integration Get All Gateways Get All Gateways: 404 Not Found Error" time="0.012">
    </testcase>
    <testcase classname="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress: success (user autenticato)" name="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress: success (user autenticato)" time="0.035">
    </testcase>
    <testcase classname="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress: 401 UnauthorizedError " name="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress: 401 UnauthorizedError " time="0.015">
    </testcase>
    <testcase classname="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress:  404 NotFoundError (network inesistente)" name="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress:  404 NotFoundError (network inesistente)" time="0.014">
    </testcase>
    <testcase classname="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress:  404 NotFoundError (macAddress inesistente)" name="GatewayRoutes integration Get Gateway By MacAddress Get Gateway By MacAddress:  404 NotFoundError (macAddress inesistente)" time="0.015">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: success (admin user)" name="GatewayRoutes integration Update Gateway Update Gateway: success (admin user)" time="0.027">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: success (operator user)" name="GatewayRoutes integration Update Gateway Update Gateway: success (operator user)" time="0.01">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: 401 UnauthorizedError" name="GatewayRoutes integration Update Gateway Update Gateway: 401 UnauthorizedError" time="0.048">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: 403 InsufficientRightsError" name="GatewayRoutes integration Update Gateway Update Gateway: 403 InsufficientRightsError" time="0.014">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: 404 NotFound (network inesistente)" name="GatewayRoutes integration Update Gateway Update Gateway: 404 NotFound (network inesistente)" time="0.011">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: 404 NotFound (macAdrress inesistente)" name="GatewayRoutes integration Update Gateway Update Gateway: 404 NotFound (macAdrress inesistente)" time="0.011">
    </testcase>
    <testcase classname="GatewayRoutes integration Update Gateway Update Gateway: 409 ConflictError (macAddress esistente) " name="GatewayRoutes integration Update Gateway Update Gateway: 409 ConflictError (macAddress esistente) " time="0.009">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway : success (admin user)" name="GatewayRoutes integration Delete Gateway Delete Gateway : success (admin user)" time="0.015">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway : success (operator user)" name="GatewayRoutes integration Delete Gateway Delete Gateway : success (operator user)" time="0.005">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway: 401 UnauthorizedError" name="GatewayRoutes integration Delete Gateway Delete Gateway: 401 UnauthorizedError" time="0.027">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway: 403 InsufficientRightsError " name="GatewayRoutes integration Delete Gateway Delete Gateway: 403 InsufficientRightsError " time="0.008">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway: 404 NotFoundError (network inesistente)" name="GatewayRoutes integration Delete Gateway Delete Gateway: 404 NotFoundError (network inesistente)" time="0.007">
    </testcase>
    <testcase classname="GatewayRoutes integration Delete Gateway Delete Gateway: 404 NotFoundError (macAddress inesistente)" name="GatewayRoutes integration Delete Gateway Delete Gateway: 404 NotFoundError (macAddress inesistente)" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AuthenticationRoutes integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:29" time="0.902" tests="3">
    <testcase classname="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: ok" name="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: ok" time="0.195">
    </testcase>
    <testcase classname="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: 401 Unauthorized" name="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: 401 Unauthorized" time="0.008">
    </testcase>
    <testcase classname="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: 404 UserNotFound" name="AuthenticationRoutes integration POST &apos;/auth&apos;  Authenticate: 404 UserNotFound" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="SensorRepository: SQLite in-memory" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:30" time="0.598" tests="17">
    <testcase classname="SensorRepository: SQLite in-memory Create new Sensor: success" name="SensorRepository: SQLite in-memory Create new Sensor: success" time="0.024">
    </testcase>
    <testcase classname="SensorRepository: SQLite in-memory Create new Sensor (solo campi obbligatori): success" name="SensorRepository: SQLite in-memory Create new Sensor (solo campi obbligatori): success" time="0.017">
    </testcase>
    <testcase classname="SensorRepository: SQLite in-memory Create new Sensor: MacAddress già esistente associato ad un altro sensore" name="SensorRepository: SQLite in-memory Create new Sensor: MacAddress già esistente associato ad un altro sensore" time="0.021">
    </testcase>
    <testcase classname="SensorRepository: SQLite in-memory Create new Sensor: MacAddress già esistente associato ad un gateway" name="SensorRepository: SQLite in-memory Create new Sensor: MacAddress già esistente associato ad un gateway" time="0.017">
    </testcase>
    <testcase classname="Get Sensor By macAddress Get Sensor By macAddress: success" name="Get Sensor By macAddress Get Sensor By macAddress: success" time="0.014">
    </testcase>
    <testcase classname="Get Sensor By macAddress Get Sensor By macAddress: macAddress inesistente" name="Get Sensor By macAddress Get Sensor By macAddress: macAddress inesistente" time="0.011">
    </testcase>
    <testcase classname="Get Sensor By macAddress Restituisce tutti i sensori associati alla rete quando sensorArray è undefined" name="Get Sensor By macAddress Restituisce tutti i sensori associati alla rete quando sensorArray è undefined" time="0.017">
    </testcase>
    <testcase classname="Get Sensor By macAddress Restituisce solo i sensori specificati in sensorArray" name="Get Sensor By macAddress Restituisce solo i sensori specificati in sensorArray" time="0.022">
    </testcase>
    <testcase classname="Get all Sensor Get all Sensor: success" name="Get all Sensor Get all Sensor: success" time="0.016">
    </testcase>
    <testcase classname="Get all Sensor Get all Sensor: Nessun sensore associato al gateway" name="Get all Sensor Get all Sensor: Nessun sensore associato al gateway" time="0.011">
    </testcase>
    <testcase classname="Get all Sensor Get all Sensor: Filtra solo i sensori appartenenti al gateway" name="Get all Sensor Get all Sensor: Filtra solo i sensori appartenenti al gateway" time="0.03">
    </testcase>
    <testcase classname="Delete Sensor Delete Sensor: success" name="Delete Sensor Delete Sensor: success" time="0.018">
    </testcase>
    <testcase classname="Delete Sensor Delete Sensor: Sensor inesistente" name="Delete Sensor Delete Sensor: Sensor inesistente" time="0.01">
    </testcase>
    <testcase classname="Update Sensor Update Sensor: success" name="Update Sensor Update Sensor: success" time="0.021">
    </testcase>
    <testcase classname="Update Sensor Update Sensor: campi opzionali vuoti" name="Update Sensor Update Sensor: campi opzionali vuoti" time="0.022">
    </testcase>
    <testcase classname="Update Sensor Update Sensor: macAddress già esistente" name="Update Sensor Update Sensor: macAddress già esistente" time="0.028">
    </testcase>
    <testcase classname="Update Sensor Update Sensor: macAddress inesistente" name="Update Sensor Update Sensor: macAddress inesistente" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="measurementController: mocked repositories" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:30" time="0.767" tests="38">
    <testcase classname="measurementController: mocked repositories create measurement: success" name="measurementController: mocked repositories create measurement: success" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories create measurement: invalid network code/ gateway mac/ sensor mac" name="measurementController: mocked repositories create measurement: invalid network code/ gateway mac/ sensor mac" time="0.007">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork without query" name="measurementController: mocked repositories getMeasurementsByNetwork without query" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork with sensorMacs" name="measurementController: mocked repositories getMeasurementsByNetwork with sensorMacs" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork with startDate and endDate" name="measurementController: mocked repositories getMeasurementsByNetwork with startDate and endDate" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork with invalid date format" name="measurementController: mocked repositories getMeasurementsByNetwork with invalid date format" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork with multiple sensors response" name="measurementController: mocked repositories getMeasurementsByNetwork with multiple sensors response" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementByNetwork with no measurements found" name="measurementController: mocked repositories getMeasurementByNetwork with no measurements found" time="0">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementByNetwork with non-existent sensor macs" name="measurementController: mocked repositories getMeasurementByNetwork with non-existent sensor macs" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementsByNetwork with some invalid sensorMacs" name="measurementController: mocked repositories getMeasurementsByNetwork with some invalid sensorMacs" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementByNetwork with multiple measurements and outlier" name="measurementController: mocked repositories getMeasurementByNetwork with multiple measurements and outlier" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementBySensor without query" name="measurementController: mocked repositories getMeasurementBySensor without query" time="0.005">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementBySensor with only endDate " name="measurementController: mocked repositories getMeasurementBySensor with only endDate " time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementBySensor with startDate and endDate " name="measurementController: mocked repositories getMeasurementBySensor with startDate and endDate " time="0.003">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementBySensor with endDate before startDate: empty array " name="measurementController: mocked repositories getMeasurementBySensor with endDate before startDate: empty array " time="0.003">
    </testcase>
    <testcase classname="measurementController: mocked repositories getMeasurementBySensor with invalid sensor/gateway/network " name="measurementController: mocked repositories getMeasurementBySensor with invalid sensor/gateway/network " time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId without query" name="measurementController: mocked repositories getStatsByNetworkId without query" time="0.003">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId with sensorArray" name="measurementController: mocked repositories getStatsByNetworkId with sensorArray" time="0.004">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId with startDate and endDate" name="measurementController: mocked repositories getStatsByNetworkId with startDate and endDate" time="0.003">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId with multiple sensors" name="measurementController: mocked repositories getStatsByNetworkId with multiple sensors" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId without measurement" name="measurementController: mocked repositories getStatsByNetworkId without measurement" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsByNetworkId with invalid sensorArray" name="measurementController: mocked repositories getStatsByNetworkId with invalid sensorArray" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId without query" name="measurementController: mocked repositories getStatsBySensorId without query" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with startDate" name="measurementController: mocked repositories getStatsBySensorId with startDate" time="0.009">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with startDate and endDate" name="measurementController: mocked repositories getStatsBySensorId with startDate and endDate" time="0.004">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with invalid sensor mac" name="measurementController: mocked repositories getStatsBySensorId with invalid sensor mac" time="0.005">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with no measurements" name="measurementController: mocked repositories getStatsBySensorId with no measurements" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with multiple measurements" name="measurementController: mocked repositories getStatsBySensorId with multiple measurements" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getStatsBySensorId with invalid date format" name="measurementController: mocked repositories getStatsBySensorId with invalid date format" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersByNetworkId without query: no outliers" name="measurementController: mocked repositories getOutliersByNetworkId without query: no outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersByNetworkId without query: outliers" name="measurementController: mocked repositories getOutliersByNetworkId without query: outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersByNetworkId with sensorArray: outliers" name="measurementController: mocked repositories getOutliersByNetworkId with sensorArray: outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersByNetworkId with startDate and endDate: outliers" name="measurementController: mocked repositories getOutliersByNetworkId with startDate and endDate: outliers" time="0.002">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersByNetworkId without query: no measurements" name="measurementController: mocked repositories getOutliersByNetworkId without query: no measurements" time="0">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersBySensorId without query: no outliers" name="measurementController: mocked repositories getOutliersBySensorId without query: no outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersBySensorId without query: outliers" name="measurementController: mocked repositories getOutliersBySensorId without query: outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersBySensorId with startDate and endDate: outliers" name="measurementController: mocked repositories getOutliersBySensorId with startDate and endDate: outliers" time="0.001">
    </testcase>
    <testcase classname="measurementController: mocked repositories getOutliersBySensorId without query: no measurements" name="measurementController: mocked repositories getOutliersBySensorId without query: no measurements" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SensorController integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:31" time="0.548" tests="20">
    <testcase classname="SensorController integration Create sensor Create sensor: succes" name="SensorController integration Create sensor Create sensor: succes" time="0.004">
    </testcase>
    <testcase classname="SensorController integration Create sensor Create sensor with only required fields" name="SensorController integration Create sensor Create sensor with only required fields" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Create sensor should throw an error if the sensor already exists" name="SensorController integration Create sensor should throw an error if the sensor already exists" time="0.004">
    </testcase>
    <testcase classname="SensorController integration Create sensor should throw an error if MAC Address is unreadable" name="SensorController integration Create sensor should throw an error if MAC Address is unreadable" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get sensor Get sensor: success" name="SensorController integration Get sensor Get sensor: success" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get sensor should throw an error if the network does not exist" name="SensorController integration Get sensor should throw an error if the network does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get sensor should throw an error if the gateway does not exist" name="SensorController integration Get sensor should throw an error if the gateway does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get all sensors Get all sensors: success" name="SensorController integration Get all sensors Get all sensors: success" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get all sensors should throw an error if the network does not exist" name="SensorController integration Get all sensors should throw an error if the network does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get all sensors should throw an error if the gateway does not exist" name="SensorController integration Get all sensors should throw an error if the gateway does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Get all sensors should return an empty array if no sensors are found" name="SensorController integration Get all sensors should return an empty array if no sensors are found" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Delete sensor Delete sensor: success" name="SensorController integration Delete sensor Delete sensor: success" time="0">
    </testcase>
    <testcase classname="SensorController integration Delete sensor should throw an error if the network does not exist" name="SensorController integration Delete sensor should throw an error if the network does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Delete sensor should throw an error if the gateway does not exist" name="SensorController integration Delete sensor should throw an error if the gateway does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Delete sensor should throw an error if the sensor does not exist" name="SensorController integration Delete sensor should throw an error if the sensor does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Update sensor should update a sensor successfully" name="SensorController integration Update sensor should update a sensor successfully" time="0">
    </testcase>
    <testcase classname="SensorController integration Update sensor should throw an error if the network does not exist" name="SensorController integration Update sensor should throw an error if the network does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Update sensor should throw an error if the gateway does not exist" name="SensorController integration Update sensor should throw an error if the gateway does not exist" time="0.001">
    </testcase>
    <testcase classname="SensorController integration Update sensor should throw an error if the sensor does not exist" name="SensorController integration Update sensor should throw an error if the sensor does not exist" time="0.002">
    </testcase>
    <testcase classname="SensorController integration Update sensor should throw an error if the sensor does not exist" name="SensorController integration Update sensor should throw an error if the sensor does not exist" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GatewayRepository: SQLite in-memory" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:32" time="0.677" tests="24">
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: success" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: success" time="0.016">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway (solo campi obbligatori): success" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway (solo campi obbligatori): success" time="0.013">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: MacAddress già esistente" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: MacAddress già esistente" time="0.013">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: MacAddress già esistente" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: MacAddress già esistente" time="0.02">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: network inesistente" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: network inesistente" time="0.006">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: macAddress già esistente in un&apos;altra network" name="GatewayRepository: SQLite in-memory Create new Gateway Create new Gateway: macAddress già esistente in un&apos;altra network" time="0.015">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: success (array vuoto)" name="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: success (array vuoto)" time="0.007">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: success" name="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: success" time="0.014">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: con più reti deve ritornare solo i gateway della rete selezionata" name="GatewayRepository: SQLite in-memory Get All Gateways Get All Gateways: con più reti deve ritornare solo i gateway della rete selezionata" time="0.023">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: success" name="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: success" time="0.011">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: macAddress inesistente" name="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: macAddress inesistente" time="0.007">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: macAddress esistente ma in un altra rete" name="GatewayRepository: SQLite in-memory Get Gateway By macAddress Get Gateway By macAddress: macAddress esistente ma in un altra rete" time="0.015">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: name and description senza cambiare macAddress" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: name and description senza cambiare macAddress" time="0.017">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: update macAddress" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: update macAddress" time="0.021">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: Gateway non esistente" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: Gateway non esistente" time="0.007">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: nuovo macAddress già esistente" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: nuovo macAddress già esistente" time="0.02">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: aggiorna solo alcuni campi (gestione caso undefined)" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: aggiorna solo alcuni campi (gestione caso undefined)" time="0.017">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: Aggiorno con stringa vuota" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: Aggiorno con stringa vuota" time="0.019">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: macAddress esistente in un altra network" name="GatewayRepository: SQLite in-memory Update Gateway Update Gateway: macAddress esistente in un altra network" time="0.014">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: success" name="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: success" time="0.013">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: gateway inesistente" name="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: gateway inesistente" time="0.007">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: gateway esistente ma in un altra rete" name="GatewayRepository: SQLite in-memory Delete Gateway Delete gateway: gateway esistente ma in un altra rete" time="0.016">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Edge cases Gestione di più gateway con operazioni in cascata" name="GatewayRepository: SQLite in-memory Edge cases Gestione di più gateway con operazioni in cascata" time="0.034">
    </testcase>
    <testcase classname="GatewayRepository: SQLite in-memory Edge cases Integrità dei dati durante le operazioni" name="GatewayRepository: SQLite in-memory Edge cases Integrità dei dati durante le operazioni" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="UserRepository: SQLite in-memory" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:33" time="0.766" tests="20">
    <testcase classname="UserRepository: SQLite in-memory Create user create user" name="UserRepository: SQLite in-memory Create user create user" time="0.021">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Create user Create user: success (admin, operator, viewer)" name="UserRepository: SQLite in-memory Create user Create user: success (admin, operator, viewer)" time="0.032">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Create user Create User: success (caratteri speciali)" name="UserRepository: SQLite in-memory Create user Create User: success (caratteri speciali)" time="0.016">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Create user ConflictError: user già esistente" name="UserRepository: SQLite in-memory Create user ConflictError: user già esistente" time="0.02">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Create user Create user: Non deve modificare user esistente in caso di conflitti" name="UserRepository: SQLite in-memory Create user Create user: Non deve modificare user esistente in caso di conflitti" time="0.013">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get All Users Get All Users: success (array vuoto)" name="UserRepository: SQLite in-memory Get All Users Get All Users: success (array vuoto)" time="0.002">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get All Users Get All Users: success" name="UserRepository: SQLite in-memory Get All Users Get All Users: success" time="0.02">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get All Users Get All Users: ritona un array con un solo user se ne esiste solo 1" name="UserRepository: SQLite in-memory Get All Users Get All Users: ritona un array con un solo user se ne esiste solo 1" time="0.008">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get User By Username Get User By Username: success" name="UserRepository: SQLite in-memory Get User By Username Get User By Username: success" time="0.014">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get User By Username Get User By Username: success (caseSensitive)" name="UserRepository: SQLite in-memory Get User By Username Get User By Username: success (caseSensitive)" time="0.012">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Get User By Username Get User By Username: NotFoundError" name="UserRepository: SQLite in-memory Get User By Username Get User By Username: NotFoundError" time="0.003">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Delete User Delete User: success" name="UserRepository: SQLite in-memory Delete User Delete User: success" time="0.018">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Delete User Delete User: NotFoundError (utente inesistente)" name="UserRepository: SQLite in-memory Delete User Delete User: NotFoundError (utente inesistente)" time="0.003">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Delete User Delete user: success (se elimino un user gli altri rimangono invariati)" name="UserRepository: SQLite in-memory Delete User Delete user: success (se elimino un user gli altri rimangono invariati)" time="0.037">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Delete User Delete User: username con caratteri speciali" name="UserRepository: SQLite in-memory Delete User Delete User: username con caratteri speciali" time="0.015">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Casi limite Gestione di più operazioni in cascata" name="UserRepository: SQLite in-memory Casi limite Gestione di più operazioni in cascata" time="0.023">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Casi limite Integrità dei dati con più operazioni in cascata" name="UserRepository: SQLite in-memory Casi limite Integrità dei dati con più operazioni in cascata" time="0.058">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory Casi limite Username e password con lunghezza elevata" name="UserRepository: SQLite in-memory Casi limite Username e password con lunghezza elevata" time="0.012">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory find user by username: not found" name="UserRepository: SQLite in-memory find user by username: not found" time="0.003">
    </testcase>
    <testcase classname="UserRepository: SQLite in-memory create user: conflict" name="UserRepository: SQLite in-memory create user: conflict" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="NetworkRepository: SQLite in-memory" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:33" time="0.486" tests="16">
    <testcase classname="NetworkRepository: SQLite in-memory create network Create new network: all fields" name="NetworkRepository: SQLite in-memory create network Create new network: all fields" time="0.01">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory create network Create new network: no description" name="NetworkRepository: SQLite in-memory create network Create new network: no description" time="0.007">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory create network Create new network: no name" name="NetworkRepository: SQLite in-memory create network Create new network: no name" time="0.006">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory create network Create new network: no name &amp; description" name="NetworkRepository: SQLite in-memory create network Create new network: no name &amp; description" time="0.009">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory create network Create new network: conflict" name="NetworkRepository: SQLite in-memory create network Create new network: conflict" time="0.01">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Get all networks Get all networks: ok, no networks presenti" name="NetworkRepository: SQLite in-memory Get all networks Get all networks: ok, no networks presenti" time="0.003">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Get all networks Get all networks: ok, due networks presenti" name="NetworkRepository: SQLite in-memory Get all networks Get all networks: ok, due networks presenti" time="0.015">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Get specific network Get specific network: ok" name="NetworkRepository: SQLite in-memory Get specific network Get specific network: ok" time="0.009">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Get specific network Get specific network: network not found" name="NetworkRepository: SQLite in-memory Get specific network Get specific network: network not found" time="0.004">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Update network Update network: ok, change all" name="NetworkRepository: SQLite in-memory Update network Update network: ok, change all" time="0.025">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Update network Update network: ok, change only optionals" name="NetworkRepository: SQLite in-memory Update network Update network: ok, change only optionals" time="0.02">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Update network Update network: ok, change only code" name="NetworkRepository: SQLite in-memory Update network Update network: ok, change only code" time="0.019">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Update network Update network: network not found" name="NetworkRepository: SQLite in-memory Update network Update network: network not found" time="0.003">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Update network Update network: network code already in use" name="NetworkRepository: SQLite in-memory Update network Update network: network code already in use" time="0.019">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Delete network Delete network: ok" name="NetworkRepository: SQLite in-memory Delete network Delete network: ok" time="0.018">
    </testcase>
    <testcase classname="NetworkRepository: SQLite in-memory Delete network Delete network: network not found" name="NetworkRepository: SQLite in-memory Delete network Delete network: network not found" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="GatewayController" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:34" time="0.412" tests="20">
    <testcase classname="GatewayController Create Gateway Create Gateway: success " name="GatewayController Create Gateway Create Gateway: success " time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Create gateway: network inesistente" name="GatewayController Create Gateway Create gateway: network inesistente" time="0.004">
    </testcase>
    <testcase classname="GatewayController Create Gateway Create Gateway: macAddress già esistente" name="GatewayController Create Gateway Create Gateway: macAddress già esistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Create Gateway: Errore nella repository" name="GatewayController Create Gateway Create Gateway: Errore nella repository" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get All Gateways Get all Gateways : success" name="GatewayController Create Gateway Get All Gateways Get all Gateways : success" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get All Gateways Get All Gateways: network senza gateways ritorna array vuoto" name="GatewayController Create Gateway Get All Gateways Get All Gateways: network senza gateways ritorna array vuoto" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get All Gateways Get All Gateways: network inesistente" name="GatewayController Create Gateway Get All Gateways Get All Gateways: network inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get All Gateways Get All Gateways: Errore nella repository" name="GatewayController Create Gateway Get All Gateways Get All Gateways: Errore nella repository" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress : success" name="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress : success" time="0.004">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: network inesistente" name="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: network inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: gateway inesistente" name="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: gateway inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: Errore nella repository" name="GatewayController Create Gateway Get Gateway By MacAddress Get Gateway By MacAddress: Errore nella repository" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Delete Gateway Delete Gateway: success" name="GatewayController Create Gateway Delete Gateway Delete Gateway: success" time="0">
    </testcase>
    <testcase classname="GatewayController Create Gateway Delete Gateway Delete Gateway: network inesistente" name="GatewayController Create Gateway Delete Gateway Delete Gateway: network inesistente" time="0">
    </testcase>
    <testcase classname="GatewayController Create Gateway Delete Gateway Delete Gateway: gateway inesistente" name="GatewayController Create Gateway Delete Gateway Delete Gateway: gateway inesistente" time="0">
    </testcase>
    <testcase classname="GatewayController Create Gateway Delete Gateway Delete Gateway: Errore nella repository" name="GatewayController Create Gateway Delete Gateway Delete Gateway: Errore nella repository" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Update Gateway Update Gateway: success" name="GatewayController Create Gateway Update Gateway Update Gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayController Create Gateway Update Gateway Update Gateway senza cambiare macAddress" name="GatewayController Create Gateway Update Gateway Update Gateway senza cambiare macAddress" time="0">
    </testcase>
    <testcase classname="GatewayController Create Gateway Update Gateway Update Gateway: network inesistente" name="GatewayController Create Gateway Update Gateway Update Gateway: network inesistente" time="0">
    </testcase>
    <testcase classname="GatewayController Create Gateway Update Gateway Update Gateway: macAddress inesistente" name="GatewayController Create Gateway Update Gateway Update Gateway: macAddress inesistente" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GatewayController integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:34" time="0.427" tests="14">
    <testcase classname="GatewayController integration Create gateway Create gateway: success" name="GatewayController integration Create gateway Create gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Create gateway Create gateway con solo campi obbligatori" name="GatewayController integration Create gateway Create gateway con solo campi obbligatori" time="0">
    </testcase>
    <testcase classname="GatewayController integration Create gateway Create gateway con mac address solo spazi" name="GatewayController integration Create gateway Create gateway con mac address solo spazi" time="0.003">
    </testcase>
    <testcase classname="GatewayController integration Get All Gateways Get All Gateways: Ritorna DTO mappato correttamente per una network valida" name="GatewayController integration Get All Gateways Get All Gateways: Ritorna DTO mappato correttamente per una network valida" time="0.005">
    </testcase>
    <testcase classname="GatewayController integration Get All Gateways Get All Gateways: network senza gateway (array vuoto)" name="GatewayController integration Get All Gateways Get All Gateways: network senza gateway (array vuoto)" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Get Gateway By MacAddress Get Gateway By MacAddress: Ritorna DTO mappato correttamente per una network valida e un gateway validi" name="GatewayController integration Get Gateway By MacAddress Get Gateway By MacAddress: Ritorna DTO mappato correttamente per una network valida e un gateway validi" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Get Gateway By MacAddress Get Gateway By MacAddress: Gateway con più sensori" name="GatewayController integration Get Gateway By MacAddress Get Gateway By MacAddress: Gateway con più sensori" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Delete gateway Delete gateway: success" name="GatewayController integration Delete gateway Delete gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Update Gateway Update Gateway: success" name="GatewayController integration Update Gateway Update Gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Update Gateway Update Gateways: aggiorna solo alcuni campi " name="GatewayController integration Update Gateway Update Gateways: aggiorna solo alcuni campi " time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Update Gateway Update gateway con mac address solo spazi" name="GatewayController integration Update Gateway Update gateway con mac address solo spazi" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Propagazione errori Propagazione errore network inesistente" name="GatewayController integration Propagazione errori Propagazione errore network inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Propagazione errori Propagazione errore gateway inesistente" name="GatewayController integration Propagazione errori Propagazione errore gateway inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayController integration Propagazione errori Propagazione errore nella craazione di un gateway" name="GatewayController integration Propagazione errori Propagazione errore nella craazione di un gateway" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AuthService: mocked UserRepository" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:35" time="0.353" tests="8">
    <testcase classname="AuthService: mocked UserRepository Process Token: ok" name="AuthService: mocked UserRepository Process Token: ok" time="0.003">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: ok, no allowed roles" name="AuthService: mocked UserRepository Process Token: ok, no allowed roles" time="0.001">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 404 User not found" name="AuthService: mocked UserRepository Process Token: 404 User not found" time="0.003">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 403 Insufficient Rights" name="AuthService: mocked UserRepository Process Token: 403 Insufficient Rights" time="0.002">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 401 Invalid token format" name="AuthService: mocked UserRepository Process Token: 401 Invalid token format" time="0.001">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 401 No token provided" name="AuthService: mocked UserRepository Process Token: 401 No token provided" time="0">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 401 Invalid token format" name="AuthService: mocked UserRepository Process Token: 401 Invalid token format" time="0">
    </testcase>
    <testcase classname="AuthService: mocked UserRepository Process Token: 401 Corrupted token" name="AuthService: mocked UserRepository Process Token: 401 Corrupted token" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AuthController integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:35" time="0.347" tests="2">
    <testcase classname="AuthController integration getToken Create token: ok" name="AuthController integration getToken Create token: ok" time="0.001">
    </testcase>
    <testcase classname="AuthController integration getToken Create token: invalid password" name="AuthController integration getToken Create token: invalid password" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MeasurementRepository: SQLite in-memory" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:35" time="0.346" tests="3">
    <testcase classname="MeasurementRepository: SQLite in-memory get measurement by network with list of sensors mac with all sensors of other networks" name="MeasurementRepository: SQLite in-memory get measurement by network with list of sensors mac with all sensors of other networks" time="0.017">
    </testcase>
    <testcase classname="MeasurementRepository: SQLite in-memory get measurements by network with list of sensors mac with no measurements" name="MeasurementRepository: SQLite in-memory get measurements by network with list of sensors mac with no measurements" time="0.027">
    </testcase>
    <testcase classname="MeasurementRepository: SQLite in-memory create and retrieve multiple measurements for the same sensor" name="MeasurementRepository: SQLite in-memory create and retrieve multiple measurements for the same sensor" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="NetworkController integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:36" time="0.279" tests="17">
    <testcase classname="NetworkController integration Create network Create network: ok" name="NetworkController integration Create network Create network: ok" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Create network Create network: ok, solo campi obbligatori" name="NetworkController integration Create network Create network: ok, solo campi obbligatori" time="0">
    </testcase>
    <testcase classname="NetworkController integration Create network Create network: code already in use" name="NetworkController integration Create network Create network: code already in use" time="0.003">
    </testcase>
    <testcase classname="NetworkController integration Create network Create network: code as unreadable string" name="NetworkController integration Create network Create network: code as unreadable string" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Get all networks Get all networks: ok, array vuoto" name="NetworkController integration Get all networks Get all networks: ok, array vuoto" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Get all networks Get all networks: ok, tre networks" name="NetworkController integration Get all networks Get all networks: ok, tre networks" time="0.002">
    </testcase>
    <testcase classname="NetworkController integration Get specific network Get specific network: ok, tutti i campi" name="NetworkController integration Get specific network Get specific network: ok, tutti i campi" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Get specific network Get specific network: ok, no name" name="NetworkController integration Get specific network Get specific network: ok, no name" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Get specific network Get specific network: ok, no name &amp; description" name="NetworkController integration Get specific network Get specific network: ok, no name &amp; description" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Get specific network Get specific network: code not found" name="NetworkController integration Get specific network Get specific network: code not found" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Update network Update network: ok, cambio campi opzionali" name="NetworkController integration Update network Update network: ok, cambio campi opzionali" time="0">
    </testcase>
    <testcase classname="NetworkController integration Update network Update network: ok, cambio tutti i campi" name="NetworkController integration Update network Update network: ok, cambio tutti i campi" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Update network Update network: code not found" name="NetworkController integration Update network Update network: code not found" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Update network Update network: code already used" name="NetworkController integration Update network Update network: code already used" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Update network Update network: code as unreadable string" name="NetworkController integration Update network Update network: code as unreadable string" time="0.001">
    </testcase>
    <testcase classname="NetworkController integration Delete network Delete network: ok" name="NetworkController integration Delete network Delete network: ok" time="0">
    </testcase>
    <testcase classname="NetworkController integration Delete network Delete network: code not found" name="NetworkController integration Delete network Delete network: code not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="UserController integration" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:36" time="0.279" tests="23">
    <testcase classname="UserController integration Create user Create user: success" name="UserController integration Create user Create user: success" time="0.001">
    </testcase>
    <testcase classname="UserController integration Create user Create user: success (admin user)" name="UserController integration Create user Create user: success (admin user)" time="0">
    </testcase>
    <testcase classname="UserController integration Create user Create user: success (viewer user)" name="UserController integration Create user Create user: success (viewer user)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Create user Create user: ConflictError (user già esistente)" name="UserController integration Create user Create user: ConflictError (user già esistente)" time="0.004">
    </testcase>
    <testcase classname="UserController integration Create user Create user: Gestione di errori del database durante la creazione" name="UserController integration Create user Create user: Gestione di errori del database durante la creazione" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get User Get User: success (user DTO senza password)" name="UserController integration Get User Get User: success (user DTO senza password)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get User Get User: success (admin user)" name="UserController integration Get User Get User: success (admin user)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get User Get User: success (viewer user)" name="UserController integration Get User Get User: success (viewer user)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get User Get User: NotFoundError (user inesistente)" name="UserController integration Get User Get User: NotFoundError (user inesistente)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get All User Get All User: success(array di user DTOs senza password)" name="UserController integration Get All User Get All User: success(array di user DTOs senza password)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Get All User Get All User: success (array vuoto se non ci sono users)" name="UserController integration Get All User Get All User: success (array vuoto se non ci sono users)" time="0">
    </testcase>
    <testcase classname="UserController integration Get All User Gestione di errori nella repository" name="UserController integration Get All User Gestione di errori nella repository" time="0">
    </testcase>
    <testcase classname="UserController integration Delete User Delete User: success" name="UserController integration Delete User Delete User: success" time="0">
    </testcase>
    <testcase classname="UserController integration Delete User Delete User: success (delete admin user)" name="UserController integration Delete User Delete User: success (delete admin user)" time="0.001">
    </testcase>
    <testcase classname="UserController integration Delete User Delete User: success (delete viewer user)" name="UserController integration Delete User Delete User: success (delete viewer user)" time="0">
    </testcase>
    <testcase classname="UserController integration Delete User Delete User: NotFoundError (user inesistente) " name="UserController integration Delete User Delete User: NotFoundError (user inesistente) " time="0">
    </testcase>
    <testcase classname="UserController integration Delete User Delete User: Gestione errori del database durante l&apos;eliminazione" name="UserController integration Delete User Delete User: Gestione errori del database durante l&apos;eliminazione" time="0">
    </testcase>
    <testcase classname="UserController integration Integrazione con mapperService Integrazione con mapUserDAOToDTO per diversi tipi di user" name="UserController integration Integrazione con mapperService Integrazione con mapUserDAOToDTO per diversi tipi di user" time="0.001">
    </testcase>
    <testcase classname="UserController integration Integrazione con mapperService Il mapping dei dati tra getAllUsers e getUser è consistente" name="UserController integration Integrazione con mapperService Il mapping dei dati tra getAllUsers e getUser è consistente" time="0.004">
    </testcase>
    <testcase classname="UserController integration Gestione degli errori e casi limite Gestione corretta dei caratteri speciali nell&apos;username" name="UserController integration Gestione degli errori e casi limite Gestione corretta dei caratteri speciali nell&apos;username" time="0">
    </testcase>
    <testcase classname="UserController integration Gestione degli errori e casi limite Gestione di username lunghi" name="UserController integration Gestione degli errori e casi limite Gestione di username lunghi" time="0.001">
    </testcase>
    <testcase classname="UserController integration Gestione degli errori e casi limite should handle repository returning null/undefined gracefully" name="UserController integration Gestione degli errori e casi limite should handle repository returning null/undefined gracefully" time="0.002">
    </testcase>
    <testcase classname="UserController integration get User: mapperService integration" name="UserController integration get User: mapperService integration" time="0">
    </testcase>
  </testsuite>
  <testsuite name="authMiddleware" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:36" time="0.266" tests="1">
    <testcase classname="authMiddleware authenticateUser with no params" name="authMiddleware authenticateUser with no params" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="NetworkRepository: mocked database" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:37" time="0.348" tests="17">
    <testcase classname="NetworkRepository: mocked database CreateNetwork: mocked database create network: all fields" name="NetworkRepository: mocked database CreateNetwork: mocked database create network: all fields" time="0.002">
    </testcase>
    <testcase classname="NetworkRepository: mocked database CreateNetwork: mocked database create network: no description" name="NetworkRepository: mocked database CreateNetwork: mocked database create network: no description" time="0.001">
    </testcase>
    <testcase classname="NetworkRepository: mocked database CreateNetwork: mocked database create network: no name" name="NetworkRepository: mocked database CreateNetwork: mocked database create network: no name" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database CreateNetwork: mocked database create network: no name and no description" name="NetworkRepository: mocked database CreateNetwork: mocked database create network: no name and no description" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database CreateNetwork: mocked database create network: conflict" name="NetworkRepository: mocked database CreateNetwork: mocked database create network: conflict" time="0.004">
    </testcase>
    <testcase classname="NetworkRepository: mocked database getAllNetworks: mocked database get all networks: no entries" name="NetworkRepository: mocked database getAllNetworks: mocked database get all networks: no entries" time="0.001">
    </testcase>
    <testcase classname="NetworkRepository: mocked database getAllNetworks: mocked database get all networks: two entries" name="NetworkRepository: mocked database getAllNetworks: mocked database get all networks: two entries" time="0.001">
    </testcase>
    <testcase classname="NetworkRepository: mocked database getNetworkByCode: mocked database get network by code" name="NetworkRepository: mocked database getNetworkByCode: mocked database get network by code" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database getNetworkByCode: mocked database find network by code: not found" name="NetworkRepository: mocked database getNetworkByCode: mocked database find network by code: not found" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database deleteNetwork: mocked database delete network by code" name="NetworkRepository: mocked database deleteNetwork: mocked database delete network by code" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database deleteNetwork: mocked database remove network by code: not found" name="NetworkRepository: mocked database deleteNetwork: mocked database remove network by code: not found" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: change name" name="NetworkRepository: mocked database updateNetwork: mocked database update network: change name" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: change description" name="NetworkRepository: mocked database updateNetwork: mocked database update network: change description" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: change name &amp; description" name="NetworkRepository: mocked database updateNetwork: mocked database update network: change name &amp; description" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: change of code" name="NetworkRepository: mocked database updateNetwork: mocked database update network: change of code" time="0.001">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: network not found" name="NetworkRepository: mocked database updateNetwork: mocked database update network: network not found" time="0">
    </testcase>
    <testcase classname="NetworkRepository: mocked database updateNetwork: mocked database update network: new code already exists" name="NetworkRepository: mocked database updateNetwork: mocked database update network: new code already exists" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GatewayRepository: mocked database" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:37" time="0.239" tests="12">
    <testcase classname="GatewayRepository: mocked database Create new Gateway Create new Gateway: success" name="GatewayRepository: mocked database Create new Gateway Create new Gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Create new Gateway Create new Gateway: macAddress già in uso" name="GatewayRepository: mocked database Create new Gateway Create new Gateway: macAddress già in uso" time="0">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Create new Gateway Create new Gateway: Network code inesistente" name="GatewayRepository: mocked database Create new Gateway Create new Gateway: Network code inesistente" time="0.004">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Create new Gateway Creazione Gateway: macAddress già in uso e network code inesistente" name="GatewayRepository: mocked database Create new Gateway Creazione Gateway: macAddress già in uso e network code inesistente" time="0">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Get All Gateways: success" name="GatewayRepository: mocked database Get All Gateways Get All Gateways: success" time="0">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Get All Gateways: network code inesistente" name="GatewayRepository: mocked database Get All Gateways Get All Gateways: network code inesistente" time="0.001">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Get All Gateways: network senza gateways" name="GatewayRepository: mocked database Get All Gateways Get All Gateways: network senza gateways" time="0">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Get Gateway By MacAddress Get Gateway By MacAddress: success" name="GatewayRepository: mocked database Get All Gateways Get Gateway By MacAddress Get Gateway By MacAddress: success" time="0.001">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Get Gateway By MacAddress Get Gateway By MacAddress: MacAddress inesistente" name="GatewayRepository: mocked database Get All Gateways Get Gateway By MacAddress Get Gateway By MacAddress: MacAddress inesistente" time="0">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Delete Gateway Delete Gateway: success" name="GatewayRepository: mocked database Get All Gateways Delete Gateway Delete Gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Update Gateway Update Gateway: success" name="GatewayRepository: mocked database Get All Gateways Update Gateway Update Gateway: success" time="0.001">
    </testcase>
    <testcase classname="GatewayRepository: mocked database Get All Gateways Update Gateway Update Gateway: macAddress già esistente" name="GatewayRepository: mocked database Get All Gateways Update Gateway Update Gateway: macAddress già esistente" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ErrorService unit test" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:37" time="0.2" tests="3">
    <testcase classname="ErrorService unit test createAppError: no message" name="ErrorService unit test createAppError: no message" time="0.004">
    </testcase>
    <testcase classname="ErrorService unit test createAppError: appError given" name="ErrorService unit test createAppError: appError given" time="0.003">
    </testcase>
    <testcase classname="ErrorService unit test createAppError: Error with status" name="ErrorService unit test createAppError: Error with status" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="UserRepository: mocked database" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:37" time="0.186" tests="19">
    <testcase classname="UserRepository: mocked database create measurement" name="UserRepository: mocked database create measurement" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database create measurement: sensor not found" name="UserRepository: mocked database create measurement: sensor not found" time="0.004">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network" name="UserRepository: mocked database get measurement by network" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors mac" name="UserRepository: mocked database get measurement by network with list of sensors mac" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors mac with some unvalid sensors" name="UserRepository: mocked database get measurement by network with list of sensors mac with some unvalid sensors" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors mac with all unvalid sensors" name="UserRepository: mocked database get measurement by network with list of sensors mac with all unvalid sensors" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with start date and end date" name="UserRepository: mocked database get measurement by network with start date and end date" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors and start date and end date in local time zone" name="UserRepository: mocked database get measurement by network with list of sensors and start date and end date in local time zone" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with start date and end date in local time zone" name="UserRepository: mocked database get measurement by network with start date and end date in local time zone" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with only start date" name="UserRepository: mocked database get measurement by network with only start date" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with only end date" name="UserRepository: mocked database get measurement by network with only end date" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors mac with some unvalid sensors" name="UserRepository: mocked database get measurement by network with list of sensors mac with some unvalid sensors" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurement by network with list of sensors mac with all empty string" name="UserRepository: mocked database get measurement by network with list of sensors mac with all empty string" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor with no date filters" name="UserRepository: mocked database get measurements by sensor with no date filters" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor with start and end date" name="UserRepository: mocked database get measurements by sensor with start and end date" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor with only start date" name="UserRepository: mocked database get measurements by sensor with only start date" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor with only end date" name="UserRepository: mocked database get measurements by sensor with only end date" time="0.001">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor : empty array when no measurements found" name="UserRepository: mocked database get measurements by sensor : empty array when no measurements found" time="0">
    </testcase>
    <testcase classname="UserRepository: mocked database get measurements by sensor with more than one measurements" name="UserRepository: mocked database get measurements by sensor with more than one measurements" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Utils unit test" errors="0" failures="0" skipped="0" timestamp="2025-05-30T16:43:38" time="0.082" tests="2">
    <testcase classname="Utils unit test ParseStringArrayParam" name="Utils unit test ParseStringArrayParam" time="0">
    </testcase>
    <testcase classname="Utils unit test ParseStringArrayParam" name="Utils unit test ParseStringArrayParam" time="0.001">
    </testcase>
  </testsuite>
</testsuites>